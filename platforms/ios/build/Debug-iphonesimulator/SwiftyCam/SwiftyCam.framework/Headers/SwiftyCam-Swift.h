#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SwiftyCam",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class CMMotionManager;

SWIFT_CLASS("_TtC9SwiftyCam11Orientation")
@interface Orientation : NSObject
@property (nonatomic, readonly, strong) CMMotionManager * _Nonnull coreMotionManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class AVCaptureVideoPreviewLayer;
@class AVCaptureSession;

SWIFT_CLASS("_TtC9SwiftyCam11PreviewView")
@interface PreviewView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) AVCaptureVideoPreviewLayer * _Nonnull videoPreviewLayer;
@property (nonatomic, strong) AVCaptureSession * _Nullable session;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol SwiftyCamButtonDelegate;

/// UIButton Subclass for Capturing Photo and Video with SwiftyCamViewController
SWIFT_CLASS("_TtC9SwiftyCam15SwiftyCamButton")
@interface SwiftyCamButton : UIButton
/// Delegate variable
@property (nonatomic, weak) id <SwiftyCamButtonDelegate> _Nullable delegate;
@property (nonatomic) BOOL buttonEnabled;
/// Initialization Declaration
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialization Declaration
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate for SwiftyCamButton
SWIFT_PROTOCOL("_TtP9SwiftyCam23SwiftyCamButtonDelegate_")
@protocol SwiftyCamButtonDelegate
/// Called when UITapGestureRecognizer begins
- (void)buttonWasTapped;
/// Called When UILongPressGestureRecognizer enters UIGestureRecognizerState.began
- (void)buttonDidBeginLongPress;
/// Called When UILongPressGestureRecognizer enters UIGestureRecognizerState.end
- (void)buttonDidEndLongPress;
/// Called when the maximum duration is reached
- (void)longPressDidReachMaximumDuration;
/// Sets the maximum duration of the video recording
- (double)setMaxiumVideoDuration SWIFT_WARN_UNUSED_RESULT;
@end

/// A function to specifty the Preview Layer’s videoGravity. Indicates how the video is displayed within a player layer’s bounds rect.
typedef SWIFT_ENUM(NSInteger, SwiftyCamVideoGravity, closed) {
/// <ul>
///   <li>
///     Specifies that the video should be stretched to fill the layer’s bounds
///   </li>
///   <li>
///     Corrsponds to <code>AVLayerVideoGravityResize</code>
///   </li>
/// </ul>
  SwiftyCamVideoGravityResize = 0,
/// <ul>
///   <li>
///     Specifies that the player should preserve the video’s aspect ratio and fit the video within the layer’s bounds.
///   </li>
///   <li>
///     Corresponds to <code>AVLayerVideoGravityResizeAspect</code>
///   </li>
/// </ul>
  SwiftyCamVideoGravityResizeAspect = 1,
/// <ul>
///   <li>
///     Specifies that the player should preserve the video’s aspect ratio and fill the layer’s bounds.
///   </li>
///   <li>
///     Correponds to <code>AVLayerVideoGravityResizeAspectFill</code>
///   </li>
/// </ul>
  SwiftyCamVideoGravityResizeAspectFill = 2,
};

@protocol SwiftyCamViewControllerDelegate;
enum VideoQuality : NSInteger;
enum CameraSelection : NSInteger;
@class UIPinchGestureRecognizer;
@class UIPanGestureRecognizer;
enum SessionSetupResult : NSInteger;
@class AVCaptureDeviceInput;
@class AVCaptureMovieFileOutput;
@class AVCaptureStillImageOutput;
@class AVCaptureDevice;
@class UIImage;
@class NSBundle;

/// A UIViewController Camera View Subclass
SWIFT_CLASS("_TtC9SwiftyCam23SwiftyCamViewController")
@interface SwiftyCamViewController : UIViewController
/// Public Camera Delegate for the Custom View Controller Subclass
@property (nonatomic, weak) id <SwiftyCamViewControllerDelegate> _Nullable cameraDelegate;
/// Maxiumum video duration if SwiftyCamButton is used
@property (nonatomic) double maximumVideoDuration;
/// Video capture quality
@property (nonatomic) enum VideoQuality videoQuality;
/// Disable audio
@property (nonatomic) BOOL disableAudio;
/// Sets whether flash is enabled for photo and video capture
@property (nonatomic) BOOL flashEnabled;
/// Sets whether Pinch to Zoom is enabled for the capture session
@property (nonatomic) BOOL pinchToZoom;
/// Sets the maximum zoom scale allowed during gestures gesture
@property (nonatomic) CGFloat maxZoomScale;
/// Sets whether Tap to Focus and Tap to Adjust Exposure is enabled for the capture session
@property (nonatomic) BOOL tapToFocus;
/// Sets whether the capture session should adjust to low light conditions automatically
/// Only supported on iPhone 5 and 5C
@property (nonatomic) BOOL lowLightBoost;
/// Set whether SwiftyCam should allow background audio from other applications
@property (nonatomic) BOOL allowBackgroundAudio;
/// Sets whether a double tap to switch cameras is supported
@property (nonatomic) BOOL doubleTapCameraSwitch;
/// Sets whether swipe vertically to zoom is supported
@property (nonatomic) BOOL swipeToZoom;
/// Sets whether swipe vertically gestures should be inverted
@property (nonatomic) BOOL swipeToZoomInverted;
/// Set default launch camera
@property (nonatomic) enum CameraSelection defaultCamera;
/// Sets wether the taken photo or video should be oriented according to the device orientation
@property (nonatomic) BOOL shouldUseDeviceOrientation;
/// Sets whether or not View Controller supports auto rotation
@property (nonatomic) BOOL allowAutoRotate;
/// Specifies the <a href="https://developer.apple.com/reference/avfoundation/avcapturevideopreviewlayer/1386708-videogravity">videoGravity</a> for the preview layer.
@property (nonatomic) enum SwiftyCamVideoGravity videoGravity;
/// Sets whether or not video recordings will record audio
/// Setting to true will prompt user for access to microphone on View Controller launch.
@property (nonatomic) BOOL audioEnabled;
/// Sets whether or not app should display prompt to app settings if audio/video permission is denied
/// If set to false, delegate function will be called to handle exception
@property (nonatomic) BOOL shouldPrompToAppSettings;
/// Video will be recorded to this folder
@property (nonatomic, copy) NSString * _Nonnull outputFolder;
/// Public access to Pinch Gesture
@property (nonatomic, readonly, strong) UIPinchGestureRecognizer * _Null_unspecified pinchGesture;
/// Public access to Pan Gesture
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Null_unspecified panGesture;
/// Returns true if video is currently being recorded
@property (nonatomic, readonly) BOOL isVideoRecording;
/// Returns true if the capture session is currently running
@property (nonatomic, readonly) BOOL isSessionRunning;
/// Returns the CameraSelection corresponding to the currently utilized camera
@property (nonatomic, readonly) enum CameraSelection currentCamera;
/// Current Capture Session
@property (nonatomic, readonly, strong) AVCaptureSession * _Nonnull session;
/// Serial queue used for setting up session
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull sessionQueue;
/// Variable for storing current zoom scale
@property (nonatomic) CGFloat zoomScale;
/// Variable for storing initial zoom scale before Pinch to Zoom begins
@property (nonatomic) CGFloat beginZoomScale;
/// Returns true if the torch (flash) is currently enabled
@property (nonatomic) BOOL isCameraTorchOn;
/// Variable to store result of capture session setup
@property (nonatomic) enum SessionSetupResult setupResult;
/// Video Input variable
@property (nonatomic, strong) AVCaptureDeviceInput * _Null_unspecified videoDeviceInput;
/// Movie File Output variable
@property (nonatomic, strong) AVCaptureMovieFileOutput * _Nullable movieFileOutput;
/// Photo File Output variable
@property (nonatomic, strong) AVCaptureStillImageOutput * _Nullable photoFileOutput;
/// Video Device variable
@property (nonatomic, strong) AVCaptureDevice * _Nullable videoDevice;
/// PreviewView for the capture session
@property (nonatomic, strong) PreviewView * _Null_unspecified previewLayer;
/// UIView for front facing flash
@property (nonatomic, strong) UIView * _Nullable flashView;
/// Pan Translation
@property (nonatomic) CGFloat previousPanTranslation;
/// Last changed orientation
@property (nonatomic, strong) Orientation * _Nonnull orientation;
/// Boolean to store when View Controller is notified session is running
@property (nonatomic) BOOL sessionRunning;
/// Disable view autorotation for forced portrait recorindg
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic) AVVideoCodecType _Nullable videoCodecType;
/// ViewDidLoad Implementation
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
/// ViewWillAppear(_ animated:) Implementation
- (void)viewWillAppear:(BOOL)animated;
/// ViewDidAppear(_ animated:) Implementation
- (void)viewDidAppear:(BOOL)animated;
/// ViewDidDisappear(_ animated:) Implementation
- (void)viewDidDisappear:(BOOL)animated;
/// Capture photo from current session
/// UIImage will be returned with the SwiftyCamViewControllerDelegate function SwiftyCamDidTakePhoto(photo:)
- (void)takePhoto;
/// Begin recording video of current session
/// SwiftyCamViewControllerDelegate function SwiftyCamDidBeginRecordingVideo() will be called
- (void)startVideoRecording;
/// Stop video recording video of current session
/// SwiftyCamViewControllerDelegate function SwiftyCamDidFinishRecordingVideo() will be called
/// When video has finished processing, the URL to the video location will be returned by SwiftyCamDidFinishProcessingVideoAt(url:)
- (void)stopVideoRecording;
/// Switch between front and rear camera
/// SwiftyCamViewControllerDelegate function SwiftyCamDidSwitchCameras(camera:  will be return the current camera selection
- (void)switchCamera;
/// Returns a UIImage from Image Data.
/// \param imageData Image Data returned from capturing photo from the capture session.
///
///
/// returns:
/// UIImage from the image data, adjusted for proper orientation.
- (UIImage * _Nonnull)processPhoto:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
- (void)capturePhotoAsyncronouslyWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Handle Denied App Privacy Settings
- (void)promptToAppSettings;
/// Returns an AVCapturePreset from VideoQuality Enumeration
/// \param quality ViewQuality enum
///
///
/// returns:
/// String representing a AVCapturePreset
- (NSString * _Nonnull)videoInputPresetFromVideoQualityWithQuality:(enum VideoQuality)quality SWIFT_WARN_UNUSED_RESULT;
/// Get Devices
+ (AVCaptureDevice * _Nullable)deviceWithMediaType:(NSString * _Nonnull)mediaType preferringPosition:(enum AVCaptureDevicePosition)position SWIFT_WARN_UNUSED_RESULT;
/// Enable or disable flash for photo
- (void)changeFlashSettingsWithDevice:(AVCaptureDevice * _Nonnull)device mode:(enum AVCaptureFlashMode)mode;
/// Enable flash
- (void)enableFlash;
/// Disable flash
- (void)disableFlash;
/// Toggles between enabling and disabling flash
- (void)toggleFlash;
/// Sets whether SwiftyCam should enable background audio from other applications or sources
- (void)setBackgroundAudioPreference;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration for Camera Selection
typedef SWIFT_ENUM(NSInteger, CameraSelection, closed) {
/// Camera on the back of the device
  CameraSelectionRear = 0,
/// Camera on the front of the device
  CameraSelectionFront = 1,
};

/// Enumeration for video quality of the capture session. Corresponds to a AVCaptureSessionPreset
typedef SWIFT_ENUM(NSInteger, VideoQuality, closed) {
/// AVCaptureSessionPresetHigh
  VideoQualityHigh = 0,
/// AVCaptureSessionPresetMedium
  VideoQualityMedium = 1,
/// AVCaptureSessionPresetLow
  VideoQualityLow = 2,
/// AVCaptureSessionPreset352x288
  VideoQualityResolution352x288 = 3,
/// AVCaptureSessionPreset640x480
  VideoQualityResolution640x480 = 4,
/// AVCaptureSessionPreset1280x720
  VideoQualityResolution1280x720 = 5,
/// AVCaptureSessionPreset1920x1080
  VideoQualityResolution1920x1080 = 6,
/// AVCaptureSessionPreset3840x2160
  VideoQualityResolution3840x2160 = 7,
/// AVCaptureSessionPresetiFrame960x540
  VideoQualityIframe960x540 = 8,
/// AVCaptureSessionPresetiFrame1280x720
  VideoQualityIframe1280x720 = 9,
};

/// Result from the AVCaptureSession Setup
/// <ul>
///   <li>
///     success: success
///   </li>
///   <li>
///     notAuthorized: User denied access to Camera of Microphone
///   </li>
///   <li>
///     configurationFailed: Unknown error
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SessionSetupResult, closed) {
  SessionSetupResultSuccess = 0,
  SessionSetupResultNotAuthorized = 1,
  SessionSetupResultConfigurationFailed = 2,
};

@class AVCaptureFileOutput;
@class AVCaptureConnection;

@interface SwiftyCamViewController (SWIFT_EXTENSION(SwiftyCam)) <AVCaptureFileOutputRecordingDelegate>
/// Process newly captured video and write it to temporary directory
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error;
@end

@class UIGestureRecognizer;

@interface SwiftyCamViewController (SWIFT_EXTENSION(SwiftyCam)) <UIGestureRecognizerDelegate>
/// Set beginZoomScale when pinch begins
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end




@interface SwiftyCamViewController (SWIFT_EXTENSION(SwiftyCam)) <SwiftyCamButtonDelegate>
/// Sets the maximum duration of the SwiftyCamButton
- (double)setMaxiumVideoDuration SWIFT_WARN_UNUSED_RESULT;
/// Set UITapGesture to take photo
- (void)buttonWasTapped;
/// Set UILongPressGesture start to begin video
- (void)buttonDidBeginLongPress;
/// Set UILongPressGesture begin to begin end video
- (void)buttonDidEndLongPress;
/// Called if maximum duration is reached
- (void)longPressDidReachMaximumDuration;
@end


/// Delegate for SwiftyCamViewController
SWIFT_PROTOCOL("_TtP9SwiftyCam31SwiftyCamViewControllerDelegate_")
@protocol SwiftyCamViewControllerDelegate
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController session did start running.
/// Photos and video capture will be enabled.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamSessionDidStartRunning:(SwiftyCamViewController * _Nonnull)swiftyCam;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController session did stops running.
/// Photos and video capture will be disabled.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamSessionDidStopRunning:(SwiftyCamViewController * _Nonnull)swiftyCam;
/// SwiftyCamViewControllerDelegate function called when the takePhoto() function is called.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param photo UIImage captured from the current session
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didTake:(UIImage * _Nonnull)photo;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController begins recording video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param camera Current camera orientation
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didBeginRecordingVideo:(enum CameraSelection)camera;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController finishes recording video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param camera Current camera orientation
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFinishRecordingVideo:(enum CameraSelection)camera;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController is done processing video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param url URL location of video in temporary directory
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFinishProcessVideoAt:(NSURL * _Nonnull)url;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController fails to record a video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param error An error object that describes the problem
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFailToRecordVideo:(NSError * _Nonnull)error;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController switches between front or rear camera.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param camera Current camera selection
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didSwitchCameras:(enum CameraSelection)camera;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController view is tapped and begins focusing at that point.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param point Location in view where camera focused
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFocusAtPoint:(CGPoint)point;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController view changes zoom level.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param zoom Current zoom level
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didChangeZoomLevel:(CGFloat)zoom;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController fails to confiture the session.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamDidFailToConfigure:(SwiftyCamViewController * _Nonnull)swiftyCam;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController does not have access to camera or microphone.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamNotAuthorized:(SwiftyCamViewController * _Nonnull)swiftyCam;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SwiftyCam",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class CMMotionManager;

SWIFT_CLASS("_TtC9SwiftyCam11Orientation")
@interface Orientation : NSObject
@property (nonatomic, readonly, strong) CMMotionManager * _Nonnull coreMotionManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class AVCaptureVideoPreviewLayer;
@class AVCaptureSession;

SWIFT_CLASS("_TtC9SwiftyCam11PreviewView")
@interface PreviewView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) AVCaptureVideoPreviewLayer * _Nonnull videoPreviewLayer;
@property (nonatomic, strong) AVCaptureSession * _Nullable session;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol SwiftyCamButtonDelegate;

/// UIButton Subclass for Capturing Photo and Video with SwiftyCamViewController
SWIFT_CLASS("_TtC9SwiftyCam15SwiftyCamButton")
@interface SwiftyCamButton : UIButton
/// Delegate variable
@property (nonatomic, weak) id <SwiftyCamButtonDelegate> _Nullable delegate;
@property (nonatomic) BOOL buttonEnabled;
/// Initialization Declaration
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialization Declaration
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate for SwiftyCamButton
SWIFT_PROTOCOL("_TtP9SwiftyCam23SwiftyCamButtonDelegate_")
@protocol SwiftyCamButtonDelegate
/// Called when UITapGestureRecognizer begins
- (void)buttonWasTapped;
/// Called When UILongPressGestureRecognizer enters UIGestureRecognizerState.began
- (void)buttonDidBeginLongPress;
/// Called When UILongPressGestureRecognizer enters UIGestureRecognizerState.end
- (void)buttonDidEndLongPress;
/// Called when the maximum duration is reached
- (void)longPressDidReachMaximumDuration;
/// Sets the maximum duration of the video recording
- (double)setMaxiumVideoDuration SWIFT_WARN_UNUSED_RESULT;
@end

/// A function to specifty the Preview Layer’s videoGravity. Indicates how the video is displayed within a player layer’s bounds rect.
typedef SWIFT_ENUM(NSInteger, SwiftyCamVideoGravity, closed) {
/// <ul>
///   <li>
///     Specifies that the video should be stretched to fill the layer’s bounds
///   </li>
///   <li>
///     Corrsponds to <code>AVLayerVideoGravityResize</code>
///   </li>
/// </ul>
  SwiftyCamVideoGravityResize = 0,
/// <ul>
///   <li>
///     Specifies that the player should preserve the video’s aspect ratio and fit the video within the layer’s bounds.
///   </li>
///   <li>
///     Corresponds to <code>AVLayerVideoGravityResizeAspect</code>
///   </li>
/// </ul>
  SwiftyCamVideoGravityResizeAspect = 1,
/// <ul>
///   <li>
///     Specifies that the player should preserve the video’s aspect ratio and fill the layer’s bounds.
///   </li>
///   <li>
///     Correponds to <code>AVLayerVideoGravityResizeAspectFill</code>
///   </li>
/// </ul>
  SwiftyCamVideoGravityResizeAspectFill = 2,
};

@protocol SwiftyCamViewControllerDelegate;
enum VideoQuality : NSInteger;
enum CameraSelection : NSInteger;
@class UIPinchGestureRecognizer;
@class UIPanGestureRecognizer;
enum SessionSetupResult : NSInteger;
@class AVCaptureDeviceInput;
@class AVCaptureMovieFileOutput;
@class AVCaptureStillImageOutput;
@class AVCaptureDevice;
@class UIImage;
@class NSBundle;

/// A UIViewController Camera View Subclass
SWIFT_CLASS("_TtC9SwiftyCam23SwiftyCamViewController")
@interface SwiftyCamViewController : UIViewController
/// Public Camera Delegate for the Custom View Controller Subclass
@property (nonatomic, weak) id <SwiftyCamViewControllerDelegate> _Nullable cameraDelegate;
/// Maxiumum video duration if SwiftyCamButton is used
@property (nonatomic) double maximumVideoDuration;
/// Video capture quality
@property (nonatomic) enum VideoQuality videoQuality;
/// Disable audio
@property (nonatomic) BOOL disableAudio;
/// Sets whether flash is enabled for photo and video capture
@property (nonatomic) BOOL flashEnabled;
/// Sets whether Pinch to Zoom is enabled for the capture session
@property (nonatomic) BOOL pinchToZoom;
/// Sets the maximum zoom scale allowed during gestures gesture
@property (nonatomic) CGFloat maxZoomScale;
/// Sets whether Tap to Focus and Tap to Adjust Exposure is enabled for the capture session
@property (nonatomic) BOOL tapToFocus;
/// Sets whether the capture session should adjust to low light conditions automatically
/// Only supported on iPhone 5 and 5C
@property (nonatomic) BOOL lowLightBoost;
/// Set whether SwiftyCam should allow background audio from other applications
@property (nonatomic) BOOL allowBackgroundAudio;
/// Sets whether a double tap to switch cameras is supported
@property (nonatomic) BOOL doubleTapCameraSwitch;
/// Sets whether swipe vertically to zoom is supported
@property (nonatomic) BOOL swipeToZoom;
/// Sets whether swipe vertically gestures should be inverted
@property (nonatomic) BOOL swipeToZoomInverted;
/// Set default launch camera
@property (nonatomic) enum CameraSelection defaultCamera;
/// Sets wether the taken photo or video should be oriented according to the device orientation
@property (nonatomic) BOOL shouldUseDeviceOrientation;
/// Sets whether or not View Controller supports auto rotation
@property (nonatomic) BOOL allowAutoRotate;
/// Specifies the <a href="https://developer.apple.com/reference/avfoundation/avcapturevideopreviewlayer/1386708-videogravity">videoGravity</a> for the preview layer.
@property (nonatomic) enum SwiftyCamVideoGravity videoGravity;
/// Sets whether or not video recordings will record audio
/// Setting to true will prompt user for access to microphone on View Controller launch.
@property (nonatomic) BOOL audioEnabled;
/// Sets whether or not app should display prompt to app settings if audio/video permission is denied
/// If set to false, delegate function will be called to handle exception
@property (nonatomic) BOOL shouldPrompToAppSettings;
/// Video will be recorded to this folder
@property (nonatomic, copy) NSString * _Nonnull outputFolder;
/// Public access to Pinch Gesture
@property (nonatomic, readonly, strong) UIPinchGestureRecognizer * _Null_unspecified pinchGesture;
/// Public access to Pan Gesture
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Null_unspecified panGesture;
/// Returns true if video is currently being recorded
@property (nonatomic, readonly) BOOL isVideoRecording;
/// Returns true if the capture session is currently running
@property (nonatomic, readonly) BOOL isSessionRunning;
/// Returns the CameraSelection corresponding to the currently utilized camera
@property (nonatomic, readonly) enum CameraSelection currentCamera;
/// Current Capture Session
@property (nonatomic, readonly, strong) AVCaptureSession * _Nonnull session;
/// Serial queue used for setting up session
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull sessionQueue;
/// Variable for storing current zoom scale
@property (nonatomic) CGFloat zoomScale;
/// Variable for storing initial zoom scale before Pinch to Zoom begins
@property (nonatomic) CGFloat beginZoomScale;
/// Returns true if the torch (flash) is currently enabled
@property (nonatomic) BOOL isCameraTorchOn;
/// Variable to store result of capture session setup
@property (nonatomic) enum SessionSetupResult setupResult;
/// Video Input variable
@property (nonatomic, strong) AVCaptureDeviceInput * _Null_unspecified videoDeviceInput;
/// Movie File Output variable
@property (nonatomic, strong) AVCaptureMovieFileOutput * _Nullable movieFileOutput;
/// Photo File Output variable
@property (nonatomic, strong) AVCaptureStillImageOutput * _Nullable photoFileOutput;
/// Video Device variable
@property (nonatomic, strong) AVCaptureDevice * _Nullable videoDevice;
/// PreviewView for the capture session
@property (nonatomic, strong) PreviewView * _Null_unspecified previewLayer;
/// UIView for front facing flash
@property (nonatomic, strong) UIView * _Nullable flashView;
/// Pan Translation
@property (nonatomic) CGFloat previousPanTranslation;
/// Last changed orientation
@property (nonatomic, strong) Orientation * _Nonnull orientation;
/// Boolean to store when View Controller is notified session is running
@property (nonatomic) BOOL sessionRunning;
/// Disable view autorotation for forced portrait recorindg
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic) AVVideoCodecType _Nullable videoCodecType;
/// ViewDidLoad Implementation
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
/// ViewWillAppear(_ animated:) Implementation
- (void)viewWillAppear:(BOOL)animated;
/// ViewDidAppear(_ animated:) Implementation
- (void)viewDidAppear:(BOOL)animated;
/// ViewDidDisappear(_ animated:) Implementation
- (void)viewDidDisappear:(BOOL)animated;
/// Capture photo from current session
/// UIImage will be returned with the SwiftyCamViewControllerDelegate function SwiftyCamDidTakePhoto(photo:)
- (void)takePhoto;
/// Begin recording video of current session
/// SwiftyCamViewControllerDelegate function SwiftyCamDidBeginRecordingVideo() will be called
- (void)startVideoRecording;
/// Stop video recording video of current session
/// SwiftyCamViewControllerDelegate function SwiftyCamDidFinishRecordingVideo() will be called
/// When video has finished processing, the URL to the video location will be returned by SwiftyCamDidFinishProcessingVideoAt(url:)
- (void)stopVideoRecording;
/// Switch between front and rear camera
/// SwiftyCamViewControllerDelegate function SwiftyCamDidSwitchCameras(camera:  will be return the current camera selection
- (void)switchCamera;
/// Returns a UIImage from Image Data.
/// \param imageData Image Data returned from capturing photo from the capture session.
///
///
/// returns:
/// UIImage from the image data, adjusted for proper orientation.
- (UIImage * _Nonnull)processPhoto:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
- (void)capturePhotoAsyncronouslyWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Handle Denied App Privacy Settings
- (void)promptToAppSettings;
/// Returns an AVCapturePreset from VideoQuality Enumeration
/// \param quality ViewQuality enum
///
///
/// returns:
/// String representing a AVCapturePreset
- (NSString * _Nonnull)videoInputPresetFromVideoQualityWithQuality:(enum VideoQuality)quality SWIFT_WARN_UNUSED_RESULT;
/// Get Devices
+ (AVCaptureDevice * _Nullable)deviceWithMediaType:(NSString * _Nonnull)mediaType preferringPosition:(enum AVCaptureDevicePosition)position SWIFT_WARN_UNUSED_RESULT;
/// Enable or disable flash for photo
- (void)changeFlashSettingsWithDevice:(AVCaptureDevice * _Nonnull)device mode:(enum AVCaptureFlashMode)mode;
/// Enable flash
- (void)enableFlash;
/// Disable flash
- (void)disableFlash;
/// Toggles between enabling and disabling flash
- (void)toggleFlash;
/// Sets whether SwiftyCam should enable background audio from other applications or sources
- (void)setBackgroundAudioPreference;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration for Camera Selection
typedef SWIFT_ENUM(NSInteger, CameraSelection, closed) {
/// Camera on the back of the device
  CameraSelectionRear = 0,
/// Camera on the front of the device
  CameraSelectionFront = 1,
};

/// Enumeration for video quality of the capture session. Corresponds to a AVCaptureSessionPreset
typedef SWIFT_ENUM(NSInteger, VideoQuality, closed) {
/// AVCaptureSessionPresetHigh
  VideoQualityHigh = 0,
/// AVCaptureSessionPresetMedium
  VideoQualityMedium = 1,
/// AVCaptureSessionPresetLow
  VideoQualityLow = 2,
/// AVCaptureSessionPreset352x288
  VideoQualityResolution352x288 = 3,
/// AVCaptureSessionPreset640x480
  VideoQualityResolution640x480 = 4,
/// AVCaptureSessionPreset1280x720
  VideoQualityResolution1280x720 = 5,
/// AVCaptureSessionPreset1920x1080
  VideoQualityResolution1920x1080 = 6,
/// AVCaptureSessionPreset3840x2160
  VideoQualityResolution3840x2160 = 7,
/// AVCaptureSessionPresetiFrame960x540
  VideoQualityIframe960x540 = 8,
/// AVCaptureSessionPresetiFrame1280x720
  VideoQualityIframe1280x720 = 9,
};

/// Result from the AVCaptureSession Setup
/// <ul>
///   <li>
///     success: success
///   </li>
///   <li>
///     notAuthorized: User denied access to Camera of Microphone
///   </li>
///   <li>
///     configurationFailed: Unknown error
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SessionSetupResult, closed) {
  SessionSetupResultSuccess = 0,
  SessionSetupResultNotAuthorized = 1,
  SessionSetupResultConfigurationFailed = 2,
};

@class AVCaptureFileOutput;
@class AVCaptureConnection;

@interface SwiftyCamViewController (SWIFT_EXTENSION(SwiftyCam)) <AVCaptureFileOutputRecordingDelegate>
/// Process newly captured video and write it to temporary directory
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error;
@end

@class UIGestureRecognizer;

@interface SwiftyCamViewController (SWIFT_EXTENSION(SwiftyCam)) <UIGestureRecognizerDelegate>
/// Set beginZoomScale when pinch begins
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end




@interface SwiftyCamViewController (SWIFT_EXTENSION(SwiftyCam)) <SwiftyCamButtonDelegate>
/// Sets the maximum duration of the SwiftyCamButton
- (double)setMaxiumVideoDuration SWIFT_WARN_UNUSED_RESULT;
/// Set UITapGesture to take photo
- (void)buttonWasTapped;
/// Set UILongPressGesture start to begin video
- (void)buttonDidBeginLongPress;
/// Set UILongPressGesture begin to begin end video
- (void)buttonDidEndLongPress;
/// Called if maximum duration is reached
- (void)longPressDidReachMaximumDuration;
@end


/// Delegate for SwiftyCamViewController
SWIFT_PROTOCOL("_TtP9SwiftyCam31SwiftyCamViewControllerDelegate_")
@protocol SwiftyCamViewControllerDelegate
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController session did start running.
/// Photos and video capture will be enabled.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamSessionDidStartRunning:(SwiftyCamViewController * _Nonnull)swiftyCam;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController session did stops running.
/// Photos and video capture will be disabled.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamSessionDidStopRunning:(SwiftyCamViewController * _Nonnull)swiftyCam;
/// SwiftyCamViewControllerDelegate function called when the takePhoto() function is called.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param photo UIImage captured from the current session
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didTake:(UIImage * _Nonnull)photo;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController begins recording video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param camera Current camera orientation
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didBeginRecordingVideo:(enum CameraSelection)camera;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController finishes recording video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param camera Current camera orientation
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFinishRecordingVideo:(enum CameraSelection)camera;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController is done processing video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param url URL location of video in temporary directory
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFinishProcessVideoAt:(NSURL * _Nonnull)url;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController fails to record a video.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param error An error object that describes the problem
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFailToRecordVideo:(NSError * _Nonnull)error;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController switches between front or rear camera.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param camera Current camera selection
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didSwitchCameras:(enum CameraSelection)camera;
/// SwiftyCamViewControllerDelegate function called when SwiftyCamViewController view is tapped and begins focusing at that point.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param point Location in view where camera focused
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didFocusAtPoint:(CGPoint)point;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController view changes zoom level.
/// \param swiftyCam Current SwiftyCamViewController session
///
/// \param zoom Current zoom level
///
- (void)swiftyCam:(SwiftyCamViewController * _Nonnull)swiftyCam didChangeZoomLevel:(CGFloat)zoom;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController fails to confiture the session.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamDidFailToConfigure:(SwiftyCamViewController * _Nonnull)swiftyCam;
/// SwiftyCamViewControllerDelegate function called when when SwiftyCamViewController does not have access to camera or microphone.
/// \param swiftyCam Current SwiftyCamViewController
///
- (void)swiftyCamNotAuthorized:(SwiftyCamViewController * _Nonnull)swiftyCam;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
